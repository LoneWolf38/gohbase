//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: ClusterStatus.proto

// This file contains protocol buffers that are used for ClustStatus

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Option int32

const (
	Option_HBASE_VERSION          Option = 0
	Option_CLUSTER_ID             Option = 1
	Option_LIVE_SERVERS           Option = 2
	Option_DEAD_SERVERS           Option = 3
	Option_MASTER                 Option = 4
	Option_BACKUP_MASTERS         Option = 5
	Option_MASTER_COPROCESSORS    Option = 6
	Option_REGIONS_IN_TRANSITION  Option = 7
	Option_BALANCER_ON            Option = 8
	Option_MASTER_INFO_PORT       Option = 9
	Option_SERVERS_NAME           Option = 10
	Option_TABLE_TO_REGIONS_COUNT Option = 11
	Option_TASKS                  Option = 12
	Option_DECOMMISSIONED_SERVERS Option = 13
	Option_UNKNOWN_SERVERS        Option = 14
)

// Enum value maps for Option.
var (
	Option_name = map[int32]string{
		0:  "HBASE_VERSION",
		1:  "CLUSTER_ID",
		2:  "LIVE_SERVERS",
		3:  "DEAD_SERVERS",
		4:  "MASTER",
		5:  "BACKUP_MASTERS",
		6:  "MASTER_COPROCESSORS",
		7:  "REGIONS_IN_TRANSITION",
		8:  "BALANCER_ON",
		9:  "MASTER_INFO_PORT",
		10: "SERVERS_NAME",
		11: "TABLE_TO_REGIONS_COUNT",
		12: "TASKS",
		13: "DECOMMISSIONED_SERVERS",
		14: "UNKNOWN_SERVERS",
	}
	Option_value = map[string]int32{
		"HBASE_VERSION":          0,
		"CLUSTER_ID":             1,
		"LIVE_SERVERS":           2,
		"DEAD_SERVERS":           3,
		"MASTER":                 4,
		"BACKUP_MASTERS":         5,
		"MASTER_COPROCESSORS":    6,
		"REGIONS_IN_TRANSITION":  7,
		"BALANCER_ON":            8,
		"MASTER_INFO_PORT":       9,
		"SERVERS_NAME":           10,
		"TABLE_TO_REGIONS_COUNT": 11,
		"TASKS":                  12,
		"DECOMMISSIONED_SERVERS": 13,
		"UNKNOWN_SERVERS":        14,
	}
)

func (x Option) Enum() *Option {
	p := new(Option)
	*p = x
	return p
}

func (x Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Option) Descriptor() protoreflect.EnumDescriptor {
	return file_ClusterStatus_proto_enumTypes[0].Descriptor()
}

func (Option) Type() protoreflect.EnumType {
	return &file_ClusterStatus_proto_enumTypes[0]
}

func (x Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Option) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Option(num)
	return nil
}

// Deprecated: Use Option.Descriptor instead.
func (Option) EnumDescriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{0}
}

type RegionState_State int32

const (
	RegionState_OFFLINE       RegionState_State = 0  // region is in an offline state
	RegionState_PENDING_OPEN  RegionState_State = 1  // sent rpc to server to open but has not begun
	RegionState_OPENING       RegionState_State = 2  // server has begun to open but not yet done
	RegionState_OPEN          RegionState_State = 3  // server opened region and updated meta
	RegionState_PENDING_CLOSE RegionState_State = 4  // sent rpc to server to close but has not begun
	RegionState_CLOSING       RegionState_State = 5  // server has begun to close but not yet done
	RegionState_CLOSED        RegionState_State = 6  // server closed region and updated meta
	RegionState_SPLITTING     RegionState_State = 7  // server started split of a region
	RegionState_SPLIT         RegionState_State = 8  // server completed split of a region
	RegionState_FAILED_OPEN   RegionState_State = 9  // failed to open, and won't retry any more
	RegionState_FAILED_CLOSE  RegionState_State = 10 // failed to close, and won't retry any more
	RegionState_MERGING       RegionState_State = 11 // server started merge a region
	RegionState_MERGED        RegionState_State = 12 // server completed merge of a region
	RegionState_SPLITTING_NEW RegionState_State = 13 // new region to be created when RS splits a parent
	// region but hasn't be created yet, or master doesn't
	// know it's already created
	RegionState_MERGING_NEW RegionState_State = 14 // new region to be created when RS merges two
	// daughter regions but hasn't be created yet, or
	// master doesn't know it's already created
	RegionState_ABNORMALLY_CLOSED RegionState_State = 15 // the region is CLOSED because of a RS crash. Usually it is the same
)

// Enum value maps for RegionState_State.
var (
	RegionState_State_name = map[int32]string{
		0:  "OFFLINE",
		1:  "PENDING_OPEN",
		2:  "OPENING",
		3:  "OPEN",
		4:  "PENDING_CLOSE",
		5:  "CLOSING",
		6:  "CLOSED",
		7:  "SPLITTING",
		8:  "SPLIT",
		9:  "FAILED_OPEN",
		10: "FAILED_CLOSE",
		11: "MERGING",
		12: "MERGED",
		13: "SPLITTING_NEW",
		14: "MERGING_NEW",
		15: "ABNORMALLY_CLOSED",
	}
	RegionState_State_value = map[string]int32{
		"OFFLINE":           0,
		"PENDING_OPEN":      1,
		"OPENING":           2,
		"OPEN":              3,
		"PENDING_CLOSE":     4,
		"CLOSING":           5,
		"CLOSED":            6,
		"SPLITTING":         7,
		"SPLIT":             8,
		"FAILED_OPEN":       9,
		"FAILED_CLOSE":      10,
		"MERGING":           11,
		"MERGED":            12,
		"SPLITTING_NEW":     13,
		"MERGING_NEW":       14,
		"ABNORMALLY_CLOSED": 15,
	}
)

func (x RegionState_State) Enum() *RegionState_State {
	p := new(RegionState_State)
	*p = x
	return p
}

func (x RegionState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ClusterStatus_proto_enumTypes[1].Descriptor()
}

func (RegionState_State) Type() protoreflect.EnumType {
	return &file_ClusterStatus_proto_enumTypes[1]
}

func (x RegionState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionState_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionState_State(num)
	return nil
}

// Deprecated: Use RegionState_State.Descriptor instead.
func (RegionState_State) EnumDescriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{0, 0}
}

type RegionLoad_CompactionState int32

const (
	RegionLoad_NONE            RegionLoad_CompactionState = 0
	RegionLoad_MINOR           RegionLoad_CompactionState = 1
	RegionLoad_MAJOR           RegionLoad_CompactionState = 2
	RegionLoad_MAJOR_AND_MINOR RegionLoad_CompactionState = 3
)

// Enum value maps for RegionLoad_CompactionState.
var (
	RegionLoad_CompactionState_name = map[int32]string{
		0: "NONE",
		1: "MINOR",
		2: "MAJOR",
		3: "MAJOR_AND_MINOR",
	}
	RegionLoad_CompactionState_value = map[string]int32{
		"NONE":            0,
		"MINOR":           1,
		"MAJOR":           2,
		"MAJOR_AND_MINOR": 3,
	}
)

func (x RegionLoad_CompactionState) Enum() *RegionLoad_CompactionState {
	p := new(RegionLoad_CompactionState)
	*p = x
	return p
}

func (x RegionLoad_CompactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionLoad_CompactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_ClusterStatus_proto_enumTypes[2].Descriptor()
}

func (RegionLoad_CompactionState) Type() protoreflect.EnumType {
	return &file_ClusterStatus_proto_enumTypes[2]
}

func (x RegionLoad_CompactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionLoad_CompactionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionLoad_CompactionState(num)
	return nil
}

// Deprecated: Use RegionLoad_CompactionState.Descriptor instead.
func (RegionLoad_CompactionState) EnumDescriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{4, 0}
}

type ServerTask_State int32

const (
	ServerTask_RUNNING  ServerTask_State = 0
	ServerTask_WAITING  ServerTask_State = 1
	ServerTask_COMPLETE ServerTask_State = 2
	ServerTask_ABORTED  ServerTask_State = 3
)

// Enum value maps for ServerTask_State.
var (
	ServerTask_State_name = map[int32]string{
		0: "RUNNING",
		1: "WAITING",
		2: "COMPLETE",
		3: "ABORTED",
	}
	ServerTask_State_value = map[string]int32{
		"RUNNING":  0,
		"WAITING":  1,
		"COMPLETE": 2,
		"ABORTED":  3,
	}
)

func (x ServerTask_State) Enum() *ServerTask_State {
	p := new(ServerTask_State)
	*p = x
	return p
}

func (x ServerTask_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerTask_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ClusterStatus_proto_enumTypes[3].Descriptor()
}

func (ServerTask_State) Type() protoreflect.EnumType {
	return &file_ClusterStatus_proto_enumTypes[3]
}

func (x ServerTask_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServerTask_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServerTask_State(num)
	return nil
}

// Deprecated: Use ServerTask_State.Descriptor instead.
func (ServerTask_State) EnumDescriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{9, 0}
}

type RegionState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegionInfo    *RegionInfo            `protobuf:"bytes,1,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	State         *RegionState_State     `protobuf:"varint,2,req,name=state,enum=pb.RegionState_State" json:"state,omitempty"`
	Stamp         *uint64                `protobuf:"varint,3,opt,name=stamp" json:"stamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegionState) Reset() {
	*x = RegionState{}
	mi := &file_ClusterStatus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionState) ProtoMessage() {}

func (x *RegionState) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionState.ProtoReflect.Descriptor instead.
func (*RegionState) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{0}
}

func (x *RegionState) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *RegionState) GetState() RegionState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RegionState_OFFLINE
}

func (x *RegionState) GetStamp() uint64 {
	if x != nil && x.Stamp != nil {
		return *x.Stamp
	}
	return 0
}

type RegionInTransition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *RegionSpecifier       `protobuf:"bytes,1,req,name=spec" json:"spec,omitempty"`
	RegionState   *RegionState           `protobuf:"bytes,2,req,name=region_state,json=regionState" json:"region_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegionInTransition) Reset() {
	*x = RegionInTransition{}
	mi := &file_ClusterStatus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionInTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionInTransition) ProtoMessage() {}

func (x *RegionInTransition) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionInTransition.ProtoReflect.Descriptor instead.
func (*RegionInTransition) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{1}
}

func (x *RegionInTransition) GetSpec() *RegionSpecifier {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *RegionInTransition) GetRegionState() *RegionState {
	if x != nil {
		return x.RegionState
	}
	return nil
}

// *
// sequence Id of a store
type StoreSequenceId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FamilyName    []byte                 `protobuf:"bytes,1,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	SequenceId    *uint64                `protobuf:"varint,2,req,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreSequenceId) Reset() {
	*x = StoreSequenceId{}
	mi := &file_ClusterStatus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreSequenceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSequenceId) ProtoMessage() {}

func (x *StoreSequenceId) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSequenceId.ProtoReflect.Descriptor instead.
func (*StoreSequenceId) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{2}
}

func (x *StoreSequenceId) GetFamilyName() []byte {
	if x != nil {
		return x.FamilyName
	}
	return nil
}

func (x *StoreSequenceId) GetSequenceId() uint64 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

// *
// contains a sequence id of a region which should be the minimum of its store sequence ids and
// list of sequence ids of the region's stores
type RegionStoreSequenceIds struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LastFlushedSequenceId *uint64                `protobuf:"varint,1,req,name=last_flushed_sequence_id,json=lastFlushedSequenceId" json:"last_flushed_sequence_id,omitempty"`
	StoreSequenceId       []*StoreSequenceId     `protobuf:"bytes,2,rep,name=store_sequence_id,json=storeSequenceId" json:"store_sequence_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RegionStoreSequenceIds) Reset() {
	*x = RegionStoreSequenceIds{}
	mi := &file_ClusterStatus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionStoreSequenceIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStoreSequenceIds) ProtoMessage() {}

func (x *RegionStoreSequenceIds) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStoreSequenceIds.ProtoReflect.Descriptor instead.
func (*RegionStoreSequenceIds) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{3}
}

func (x *RegionStoreSequenceIds) GetLastFlushedSequenceId() uint64 {
	if x != nil && x.LastFlushedSequenceId != nil {
		return *x.LastFlushedSequenceId
	}
	return 0
}

func (x *RegionStoreSequenceIds) GetStoreSequenceId() []*StoreSequenceId {
	if x != nil {
		return x.StoreSequenceId
	}
	return nil
}

type RegionLoad struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * the region specifier
	RegionSpecifier *RegionSpecifier `protobuf:"bytes,1,req,name=region_specifier,json=regionSpecifier" json:"region_specifier,omitempty"`
	// * the number of stores for the region
	Stores *uint32 `protobuf:"varint,2,opt,name=stores" json:"stores,omitempty"`
	// * the number of storefiles for the region
	Storefiles *uint32 `protobuf:"varint,3,opt,name=storefiles" json:"storefiles,omitempty"`
	// * the total size of the store files for the region, uncompressed, in MB
	StoreUncompressedSize_MB *uint32 `protobuf:"varint,4,opt,name=store_uncompressed_size_MB,json=storeUncompressedSizeMB" json:"store_uncompressed_size_MB,omitempty"`
	// * the current total size of the store files for the region, in MB
	StorefileSize_MB *uint32 `protobuf:"varint,5,opt,name=storefile_size_MB,json=storefileSizeMB" json:"storefile_size_MB,omitempty"`
	// * the current size of the memstore for the region, in MB
	MemStoreSize_MB *uint32 `protobuf:"varint,6,opt,name=mem_store_size_MB,json=memStoreSizeMB" json:"mem_store_size_MB,omitempty"`
	// *
	// The current total size of root-level store file indexes for the region,
	// in KB. The same as {@link #rootIndexSizeKB}.
	StorefileIndexSize_KB *uint64 `protobuf:"varint,7,opt,name=storefile_index_size_KB,json=storefileIndexSizeKB" json:"storefile_index_size_KB,omitempty"`
	// * the current total read requests made to region
	ReadRequestsCount *uint64 `protobuf:"varint,8,opt,name=read_requests_count,json=readRequestsCount" json:"read_requests_count,omitempty"`
	// * the current total write requests made to region
	WriteRequestsCount *uint64 `protobuf:"varint,9,opt,name=write_requests_count,json=writeRequestsCount" json:"write_requests_count,omitempty"`
	// * the total compacting key values in currently running compaction
	TotalCompacting_KVs *uint64 `protobuf:"varint,10,opt,name=total_compacting_KVs,json=totalCompactingKVs" json:"total_compacting_KVs,omitempty"`
	// * the completed count of key values in currently running compaction
	CurrentCompacted_KVs *uint64 `protobuf:"varint,11,opt,name=current_compacted_KVs,json=currentCompactedKVs" json:"current_compacted_KVs,omitempty"`
	// * The current total size of root-level indexes for the region, in KB.
	RootIndexSize_KB *uint32 `protobuf:"varint,12,opt,name=root_index_size_KB,json=rootIndexSizeKB" json:"root_index_size_KB,omitempty"`
	// * The total size of all index blocks, not just the root level, in KB.
	TotalStaticIndexSize_KB *uint32 `protobuf:"varint,13,opt,name=total_static_index_size_KB,json=totalStaticIndexSizeKB" json:"total_static_index_size_KB,omitempty"`
	// *
	// The total size of all Bloom filter blocks, not just loaded into the
	// block cache, in KB.
	TotalStaticBloomSize_KB *uint32 `protobuf:"varint,14,opt,name=total_static_bloom_size_KB,json=totalStaticBloomSizeKB" json:"total_static_bloom_size_KB,omitempty"`
	// * the most recent sequence Id from cache flush
	CompleteSequenceId *uint64 `protobuf:"varint,15,opt,name=complete_sequence_id,json=completeSequenceId" json:"complete_sequence_id,omitempty"`
	// * The current data locality for region in the regionserver
	DataLocality          *float32 `protobuf:"fixed32,16,opt,name=data_locality,json=dataLocality" json:"data_locality,omitempty"`
	LastMajorCompactionTs *uint64  `protobuf:"varint,17,opt,name=last_major_compaction_ts,json=lastMajorCompactionTs,def=0" json:"last_major_compaction_ts,omitempty"`
	// * the most recent sequence Id of store from cache flush
	StoreCompleteSequenceId []*StoreSequenceId `protobuf:"bytes,18,rep,name=store_complete_sequence_id,json=storeCompleteSequenceId" json:"store_complete_sequence_id,omitempty"`
	// * the current total filtered read requests made to region
	FilteredReadRequestsCount *uint64 `protobuf:"varint,19,opt,name=filtered_read_requests_count,json=filteredReadRequestsCount" json:"filtered_read_requests_count,omitempty"`
	// * the current total coprocessor requests made to region
	CpRequestsCount *uint64 `protobuf:"varint,20,opt,name=cp_requests_count,json=cpRequestsCount" json:"cp_requests_count,omitempty"`
	// * the number of references active on the store
	StoreRefCount *int32 `protobuf:"varint,21,opt,name=store_ref_count,json=storeRefCount,def=0" json:"store_ref_count,omitempty"`
	// *
	//
	//	The max number of references active on single store file among all compacted store files
	//	that belong to given region
	MaxCompactedStoreFileRefCount *int32 `protobuf:"varint,22,opt,name=max_compacted_store_file_ref_count,json=maxCompactedStoreFileRefCount,def=0" json:"max_compacted_store_file_ref_count,omitempty"`
	// * The current data locality for ssd for region in the regionserver
	DataLocalityForSsd *float32 `protobuf:"fixed32,23,opt,name=data_locality_for_ssd,json=dataLocalityForSsd" json:"data_locality_for_ssd,omitempty"`
	// * The current blocks local weight for region in the regionserver
	BlocksLocalWeight *uint64 `protobuf:"varint,24,opt,name=blocks_local_weight,json=blocksLocalWeight" json:"blocks_local_weight,omitempty"`
	// * The current blocks local weight with ssd for region in the regionserver
	BlocksLocalWithSsdWeight *uint64 `protobuf:"varint,25,opt,name=blocks_local_with_ssd_weight,json=blocksLocalWithSsdWeight" json:"blocks_local_with_ssd_weight,omitempty"`
	// * The current blocks total weight for region in the regionserver
	BlocksTotalWeight *uint64 `protobuf:"varint,26,opt,name=blocks_total_weight,json=blocksTotalWeight" json:"blocks_total_weight,omitempty"`
	// * The compaction state for region
	CompactionState *RegionLoad_CompactionState `protobuf:"varint,27,opt,name=compaction_state,json=compactionState,enum=pb.RegionLoad_CompactionState" json:"compaction_state,omitempty"`
	// * Total region size in MB
	RegionSize_MB *uint32 `protobuf:"varint,28,opt,name=region_size_MB,json=regionSizeMB" json:"region_size_MB,omitempty"`
	// * Current region cache ratio on this server
	CurrentRegionCachedRatio *float32 `protobuf:"fixed32,29,opt,name=current_region_cached_ratio,json=currentRegionCachedRatio" json:"current_region_cached_ratio,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for RegionLoad fields.
const (
	Default_RegionLoad_LastMajorCompactionTs         = uint64(0)
	Default_RegionLoad_StoreRefCount                 = int32(0)
	Default_RegionLoad_MaxCompactedStoreFileRefCount = int32(0)
)

func (x *RegionLoad) Reset() {
	*x = RegionLoad{}
	mi := &file_ClusterStatus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionLoad) ProtoMessage() {}

func (x *RegionLoad) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionLoad.ProtoReflect.Descriptor instead.
func (*RegionLoad) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{4}
}

func (x *RegionLoad) GetRegionSpecifier() *RegionSpecifier {
	if x != nil {
		return x.RegionSpecifier
	}
	return nil
}

func (x *RegionLoad) GetStores() uint32 {
	if x != nil && x.Stores != nil {
		return *x.Stores
	}
	return 0
}

func (x *RegionLoad) GetStorefiles() uint32 {
	if x != nil && x.Storefiles != nil {
		return *x.Storefiles
	}
	return 0
}

func (x *RegionLoad) GetStoreUncompressedSize_MB() uint32 {
	if x != nil && x.StoreUncompressedSize_MB != nil {
		return *x.StoreUncompressedSize_MB
	}
	return 0
}

func (x *RegionLoad) GetStorefileSize_MB() uint32 {
	if x != nil && x.StorefileSize_MB != nil {
		return *x.StorefileSize_MB
	}
	return 0
}

func (x *RegionLoad) GetMemStoreSize_MB() uint32 {
	if x != nil && x.MemStoreSize_MB != nil {
		return *x.MemStoreSize_MB
	}
	return 0
}

func (x *RegionLoad) GetStorefileIndexSize_KB() uint64 {
	if x != nil && x.StorefileIndexSize_KB != nil {
		return *x.StorefileIndexSize_KB
	}
	return 0
}

func (x *RegionLoad) GetReadRequestsCount() uint64 {
	if x != nil && x.ReadRequestsCount != nil {
		return *x.ReadRequestsCount
	}
	return 0
}

func (x *RegionLoad) GetWriteRequestsCount() uint64 {
	if x != nil && x.WriteRequestsCount != nil {
		return *x.WriteRequestsCount
	}
	return 0
}

func (x *RegionLoad) GetTotalCompacting_KVs() uint64 {
	if x != nil && x.TotalCompacting_KVs != nil {
		return *x.TotalCompacting_KVs
	}
	return 0
}

func (x *RegionLoad) GetCurrentCompacted_KVs() uint64 {
	if x != nil && x.CurrentCompacted_KVs != nil {
		return *x.CurrentCompacted_KVs
	}
	return 0
}

func (x *RegionLoad) GetRootIndexSize_KB() uint32 {
	if x != nil && x.RootIndexSize_KB != nil {
		return *x.RootIndexSize_KB
	}
	return 0
}

func (x *RegionLoad) GetTotalStaticIndexSize_KB() uint32 {
	if x != nil && x.TotalStaticIndexSize_KB != nil {
		return *x.TotalStaticIndexSize_KB
	}
	return 0
}

func (x *RegionLoad) GetTotalStaticBloomSize_KB() uint32 {
	if x != nil && x.TotalStaticBloomSize_KB != nil {
		return *x.TotalStaticBloomSize_KB
	}
	return 0
}

func (x *RegionLoad) GetCompleteSequenceId() uint64 {
	if x != nil && x.CompleteSequenceId != nil {
		return *x.CompleteSequenceId
	}
	return 0
}

func (x *RegionLoad) GetDataLocality() float32 {
	if x != nil && x.DataLocality != nil {
		return *x.DataLocality
	}
	return 0
}

func (x *RegionLoad) GetLastMajorCompactionTs() uint64 {
	if x != nil && x.LastMajorCompactionTs != nil {
		return *x.LastMajorCompactionTs
	}
	return Default_RegionLoad_LastMajorCompactionTs
}

func (x *RegionLoad) GetStoreCompleteSequenceId() []*StoreSequenceId {
	if x != nil {
		return x.StoreCompleteSequenceId
	}
	return nil
}

func (x *RegionLoad) GetFilteredReadRequestsCount() uint64 {
	if x != nil && x.FilteredReadRequestsCount != nil {
		return *x.FilteredReadRequestsCount
	}
	return 0
}

func (x *RegionLoad) GetCpRequestsCount() uint64 {
	if x != nil && x.CpRequestsCount != nil {
		return *x.CpRequestsCount
	}
	return 0
}

func (x *RegionLoad) GetStoreRefCount() int32 {
	if x != nil && x.StoreRefCount != nil {
		return *x.StoreRefCount
	}
	return Default_RegionLoad_StoreRefCount
}

func (x *RegionLoad) GetMaxCompactedStoreFileRefCount() int32 {
	if x != nil && x.MaxCompactedStoreFileRefCount != nil {
		return *x.MaxCompactedStoreFileRefCount
	}
	return Default_RegionLoad_MaxCompactedStoreFileRefCount
}

func (x *RegionLoad) GetDataLocalityForSsd() float32 {
	if x != nil && x.DataLocalityForSsd != nil {
		return *x.DataLocalityForSsd
	}
	return 0
}

func (x *RegionLoad) GetBlocksLocalWeight() uint64 {
	if x != nil && x.BlocksLocalWeight != nil {
		return *x.BlocksLocalWeight
	}
	return 0
}

func (x *RegionLoad) GetBlocksLocalWithSsdWeight() uint64 {
	if x != nil && x.BlocksLocalWithSsdWeight != nil {
		return *x.BlocksLocalWithSsdWeight
	}
	return 0
}

func (x *RegionLoad) GetBlocksTotalWeight() uint64 {
	if x != nil && x.BlocksTotalWeight != nil {
		return *x.BlocksTotalWeight
	}
	return 0
}

func (x *RegionLoad) GetCompactionState() RegionLoad_CompactionState {
	if x != nil && x.CompactionState != nil {
		return *x.CompactionState
	}
	return RegionLoad_NONE
}

func (x *RegionLoad) GetRegionSize_MB() uint32 {
	if x != nil && x.RegionSize_MB != nil {
		return *x.RegionSize_MB
	}
	return 0
}

func (x *RegionLoad) GetCurrentRegionCachedRatio() float32 {
	if x != nil && x.CurrentRegionCachedRatio != nil {
		return *x.CurrentRegionCachedRatio
	}
	return 0
}

type UserLoad struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * short user name
	UserName *string `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
	// * Metrics for all clients of a user
	ClientMetrics []*ClientMetrics `protobuf:"bytes,2,rep,name=clientMetrics" json:"clientMetrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLoad) Reset() {
	*x = UserLoad{}
	mi := &file_ClusterStatus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoad) ProtoMessage() {}

func (x *UserLoad) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoad.ProtoReflect.Descriptor instead.
func (*UserLoad) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{5}
}

func (x *UserLoad) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UserLoad) GetClientMetrics() []*ClientMetrics {
	if x != nil {
		return x.ClientMetrics
	}
	return nil
}

type ClientMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * client host name
	HostName *string `protobuf:"bytes,1,req,name=hostName" json:"hostName,omitempty"`
	// * the current total read requests made from a client
	ReadRequestsCount *uint64 `protobuf:"varint,2,opt,name=read_requests_count,json=readRequestsCount" json:"read_requests_count,omitempty"`
	// * the current total write requests made from a client
	WriteRequestsCount *uint64 `protobuf:"varint,3,opt,name=write_requests_count,json=writeRequestsCount" json:"write_requests_count,omitempty"`
	// * the current total filtered requests made from a client
	FilteredRequestsCount *uint64 `protobuf:"varint,4,opt,name=filtered_requests_count,json=filteredRequestsCount" json:"filtered_requests_count,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ClientMetrics) Reset() {
	*x = ClientMetrics{}
	mi := &file_ClusterStatus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMetrics) ProtoMessage() {}

func (x *ClientMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMetrics.ProtoReflect.Descriptor instead.
func (*ClientMetrics) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{6}
}

func (x *ClientMetrics) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *ClientMetrics) GetReadRequestsCount() uint64 {
	if x != nil && x.ReadRequestsCount != nil {
		return *x.ReadRequestsCount
	}
	return 0
}

func (x *ClientMetrics) GetWriteRequestsCount() uint64 {
	if x != nil && x.WriteRequestsCount != nil {
		return *x.WriteRequestsCount
	}
	return 0
}

func (x *ClientMetrics) GetFilteredRequestsCount() uint64 {
	if x != nil && x.FilteredRequestsCount != nil {
		return *x.FilteredRequestsCount
	}
	return 0
}

type ReplicationLoadSink struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	AgeOfLastAppliedOp        *uint64                `protobuf:"varint,1,req,name=ageOfLastAppliedOp" json:"ageOfLastAppliedOp,omitempty"`
	TimeStampsOfLastAppliedOp *uint64                `protobuf:"varint,2,req,name=timeStampsOfLastAppliedOp" json:"timeStampsOfLastAppliedOp,omitempty"`
	// The below two were added after hbase-2.0.0 went out. They have to be added as 'optional' else
	// we break upgrades; old RegionServers reporting in w/ old forms of this message will fail to
	// deserialize on the new Master. See HBASE-25234
	TimestampStarted  *uint64 `protobuf:"varint,3,opt,name=timestampStarted" json:"timestampStarted,omitempty"`
	TotalOpsProcessed *uint64 `protobuf:"varint,4,opt,name=totalOpsProcessed" json:"totalOpsProcessed,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReplicationLoadSink) Reset() {
	*x = ReplicationLoadSink{}
	mi := &file_ClusterStatus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationLoadSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationLoadSink) ProtoMessage() {}

func (x *ReplicationLoadSink) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationLoadSink.ProtoReflect.Descriptor instead.
func (*ReplicationLoadSink) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicationLoadSink) GetAgeOfLastAppliedOp() uint64 {
	if x != nil && x.AgeOfLastAppliedOp != nil {
		return *x.AgeOfLastAppliedOp
	}
	return 0
}

func (x *ReplicationLoadSink) GetTimeStampsOfLastAppliedOp() uint64 {
	if x != nil && x.TimeStampsOfLastAppliedOp != nil {
		return *x.TimeStampsOfLastAppliedOp
	}
	return 0
}

func (x *ReplicationLoadSink) GetTimestampStarted() uint64 {
	if x != nil && x.TimestampStarted != nil {
		return *x.TimestampStarted
	}
	return 0
}

func (x *ReplicationLoadSink) GetTotalOpsProcessed() uint64 {
	if x != nil && x.TotalOpsProcessed != nil {
		return *x.TotalOpsProcessed
	}
	return 0
}

type ReplicationLoadSource struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	PeerID                     *string                `protobuf:"bytes,1,req,name=peerID" json:"peerID,omitempty"`
	AgeOfLastShippedOp         *uint64                `protobuf:"varint,2,req,name=ageOfLastShippedOp" json:"ageOfLastShippedOp,omitempty"`
	SizeOfLogQueue             *uint32                `protobuf:"varint,3,req,name=sizeOfLogQueue" json:"sizeOfLogQueue,omitempty"`
	TimeStampOfLastShippedOp   *uint64                `protobuf:"varint,4,req,name=timeStampOfLastShippedOp" json:"timeStampOfLastShippedOp,omitempty"`
	ReplicationLag             *uint64                `protobuf:"varint,5,req,name=replicationLag" json:"replicationLag,omitempty"`
	TimeStampOfNextToReplicate *uint64                `protobuf:"varint,6,opt,name=timeStampOfNextToReplicate" json:"timeStampOfNextToReplicate,omitempty"`
	QueueId                    *string                `protobuf:"bytes,7,opt,name=queueId" json:"queueId,omitempty"`
	Recovered                  *bool                  `protobuf:"varint,8,opt,name=recovered" json:"recovered,omitempty"`
	Running                    *bool                  `protobuf:"varint,9,opt,name=running" json:"running,omitempty"`
	EditsSinceRestart          *bool                  `protobuf:"varint,10,opt,name=editsSinceRestart" json:"editsSinceRestart,omitempty"`
	EditsRead                  *uint64                `protobuf:"varint,11,opt,name=editsRead" json:"editsRead,omitempty"`
	OPsShipped                 *uint64                `protobuf:"varint,12,opt,name=oPsShipped" json:"oPsShipped,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ReplicationLoadSource) Reset() {
	*x = ReplicationLoadSource{}
	mi := &file_ClusterStatus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationLoadSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationLoadSource) ProtoMessage() {}

func (x *ReplicationLoadSource) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationLoadSource.ProtoReflect.Descriptor instead.
func (*ReplicationLoadSource) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicationLoadSource) GetPeerID() string {
	if x != nil && x.PeerID != nil {
		return *x.PeerID
	}
	return ""
}

func (x *ReplicationLoadSource) GetAgeOfLastShippedOp() uint64 {
	if x != nil && x.AgeOfLastShippedOp != nil {
		return *x.AgeOfLastShippedOp
	}
	return 0
}

func (x *ReplicationLoadSource) GetSizeOfLogQueue() uint32 {
	if x != nil && x.SizeOfLogQueue != nil {
		return *x.SizeOfLogQueue
	}
	return 0
}

func (x *ReplicationLoadSource) GetTimeStampOfLastShippedOp() uint64 {
	if x != nil && x.TimeStampOfLastShippedOp != nil {
		return *x.TimeStampOfLastShippedOp
	}
	return 0
}

func (x *ReplicationLoadSource) GetReplicationLag() uint64 {
	if x != nil && x.ReplicationLag != nil {
		return *x.ReplicationLag
	}
	return 0
}

func (x *ReplicationLoadSource) GetTimeStampOfNextToReplicate() uint64 {
	if x != nil && x.TimeStampOfNextToReplicate != nil {
		return *x.TimeStampOfNextToReplicate
	}
	return 0
}

func (x *ReplicationLoadSource) GetQueueId() string {
	if x != nil && x.QueueId != nil {
		return *x.QueueId
	}
	return ""
}

func (x *ReplicationLoadSource) GetRecovered() bool {
	if x != nil && x.Recovered != nil {
		return *x.Recovered
	}
	return false
}

func (x *ReplicationLoadSource) GetRunning() bool {
	if x != nil && x.Running != nil {
		return *x.Running
	}
	return false
}

func (x *ReplicationLoadSource) GetEditsSinceRestart() bool {
	if x != nil && x.EditsSinceRestart != nil {
		return *x.EditsSinceRestart
	}
	return false
}

func (x *ReplicationLoadSource) GetEditsRead() uint64 {
	if x != nil && x.EditsRead != nil {
		return *x.EditsRead
	}
	return 0
}

func (x *ReplicationLoadSource) GetOPsShipped() uint64 {
	if x != nil && x.OPsShipped != nil {
		return *x.OPsShipped
	}
	return 0
}

type ServerTask struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Description    *string                `protobuf:"bytes,1,req,name=description" json:"description,omitempty"`
	Status         *string                `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
	State          *ServerTask_State      `protobuf:"varint,3,req,name=state,enum=pb.ServerTask_State" json:"state,omitempty"`
	StartTime      *uint64                `protobuf:"varint,4,opt,name=startTime" json:"startTime,omitempty"`
	CompletionTime *uint64                `protobuf:"varint,5,opt,name=completionTime" json:"completionTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ServerTask) Reset() {
	*x = ServerTask{}
	mi := &file_ClusterStatus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTask) ProtoMessage() {}

func (x *ServerTask) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTask.ProtoReflect.Descriptor instead.
func (*ServerTask) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{9}
}

func (x *ServerTask) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ServerTask) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ServerTask) GetState() ServerTask_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ServerTask_RUNNING
}

func (x *ServerTask) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *ServerTask) GetCompletionTime() uint64 {
	if x != nil && x.CompletionTime != nil {
		return *x.CompletionTime
	}
	return 0
}

type ServerLoad struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Number of requests since last report.
	NumberOfRequests *uint64 `protobuf:"varint,1,opt,name=number_of_requests,json=numberOfRequests" json:"number_of_requests,omitempty"`
	// * Total Number of requests from the start of the region server.
	TotalNumberOfRequests *uint64 `protobuf:"varint,2,opt,name=total_number_of_requests,json=totalNumberOfRequests" json:"total_number_of_requests,omitempty"`
	// * the amount of used heap, in MB.
	UsedHeap_MB *uint32 `protobuf:"varint,3,opt,name=used_heap_MB,json=usedHeapMB" json:"used_heap_MB,omitempty"`
	// * the maximum allowable size of the heap, in MB.
	MaxHeap_MB *uint32 `protobuf:"varint,4,opt,name=max_heap_MB,json=maxHeapMB" json:"max_heap_MB,omitempty"`
	// * Information on the load of individual regions.
	RegionLoads []*RegionLoad `protobuf:"bytes,5,rep,name=region_loads,json=regionLoads" json:"region_loads,omitempty"`
	// *
	// Regionserver-level coprocessors, e.g., WALObserver implementations.
	// Region-level coprocessors, on the other hand, are stored inside RegionLoad
	// objects.
	Coprocessors []*Coprocessor `protobuf:"bytes,6,rep,name=coprocessors" json:"coprocessors,omitempty"`
	// *
	// Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
	// time is measured as the difference, measured in milliseconds, between the current time
	// and midnight, January 1, 1970 UTC.
	ReportStartTime *uint64 `protobuf:"varint,7,opt,name=report_start_time,json=reportStartTime" json:"report_start_time,omitempty"`
	// *
	// Time when report was generated.
	// time is measured as the difference, measured in milliseconds, between the current time
	// and midnight, January 1, 1970 UTC.
	ReportEndTime *uint64 `protobuf:"varint,8,opt,name=report_end_time,json=reportEndTime" json:"report_end_time,omitempty"`
	// *
	// The port number that this region server is hosing an info server on.
	InfoServerPort *uint32 `protobuf:"varint,9,opt,name=info_server_port,json=infoServerPort" json:"info_server_port,omitempty"`
	// *
	// The replicationLoadSource for the replication Source status of this region server.
	ReplLoadSource []*ReplicationLoadSource `protobuf:"bytes,10,rep,name=replLoadSource" json:"replLoadSource,omitempty"`
	// *
	// The replicationLoadSink for the replication Sink status of this region server.
	ReplLoadSink *ReplicationLoadSink `protobuf:"bytes,11,opt,name=replLoadSink" json:"replLoadSink,omitempty"`
	// *
	// The metrics for each user on this region server
	UserLoads []*UserLoad `protobuf:"bytes,12,rep,name=userLoads" json:"userLoads,omitempty"`
	// *
	// The metrics for read requests count on this region server
	ReadRequestsCount *uint64 `protobuf:"varint,13,opt,name=read_requests_count,json=readRequestsCount" json:"read_requests_count,omitempty"`
	// *
	// The metrics for write requests on this region server
	WriteRequestsCount *uint64 `protobuf:"varint,14,opt,name=write_requests_count,json=writeRequestsCount" json:"write_requests_count,omitempty"`
	// *
	// The active monitored tasks
	Tasks []*ServerTask `protobuf:"bytes,15,rep,name=tasks" json:"tasks,omitempty"`
	// *
	// The metrics for region cached on this region server
	RegionCachedInfo map[string]uint32 `protobuf:"bytes,16,rep,name=regionCachedInfo" json:"regionCachedInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ServerLoad) Reset() {
	*x = ServerLoad{}
	mi := &file_ClusterStatus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLoad) ProtoMessage() {}

func (x *ServerLoad) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLoad.ProtoReflect.Descriptor instead.
func (*ServerLoad) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{10}
}

func (x *ServerLoad) GetNumberOfRequests() uint64 {
	if x != nil && x.NumberOfRequests != nil {
		return *x.NumberOfRequests
	}
	return 0
}

func (x *ServerLoad) GetTotalNumberOfRequests() uint64 {
	if x != nil && x.TotalNumberOfRequests != nil {
		return *x.TotalNumberOfRequests
	}
	return 0
}

func (x *ServerLoad) GetUsedHeap_MB() uint32 {
	if x != nil && x.UsedHeap_MB != nil {
		return *x.UsedHeap_MB
	}
	return 0
}

func (x *ServerLoad) GetMaxHeap_MB() uint32 {
	if x != nil && x.MaxHeap_MB != nil {
		return *x.MaxHeap_MB
	}
	return 0
}

func (x *ServerLoad) GetRegionLoads() []*RegionLoad {
	if x != nil {
		return x.RegionLoads
	}
	return nil
}

func (x *ServerLoad) GetCoprocessors() []*Coprocessor {
	if x != nil {
		return x.Coprocessors
	}
	return nil
}

func (x *ServerLoad) GetReportStartTime() uint64 {
	if x != nil && x.ReportStartTime != nil {
		return *x.ReportStartTime
	}
	return 0
}

func (x *ServerLoad) GetReportEndTime() uint64 {
	if x != nil && x.ReportEndTime != nil {
		return *x.ReportEndTime
	}
	return 0
}

func (x *ServerLoad) GetInfoServerPort() uint32 {
	if x != nil && x.InfoServerPort != nil {
		return *x.InfoServerPort
	}
	return 0
}

func (x *ServerLoad) GetReplLoadSource() []*ReplicationLoadSource {
	if x != nil {
		return x.ReplLoadSource
	}
	return nil
}

func (x *ServerLoad) GetReplLoadSink() *ReplicationLoadSink {
	if x != nil {
		return x.ReplLoadSink
	}
	return nil
}

func (x *ServerLoad) GetUserLoads() []*UserLoad {
	if x != nil {
		return x.UserLoads
	}
	return nil
}

func (x *ServerLoad) GetReadRequestsCount() uint64 {
	if x != nil && x.ReadRequestsCount != nil {
		return *x.ReadRequestsCount
	}
	return 0
}

func (x *ServerLoad) GetWriteRequestsCount() uint64 {
	if x != nil && x.WriteRequestsCount != nil {
		return *x.WriteRequestsCount
	}
	return 0
}

func (x *ServerLoad) GetTasks() []*ServerTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ServerLoad) GetRegionCachedInfo() map[string]uint32 {
	if x != nil {
		return x.RegionCachedInfo
	}
	return nil
}

type LiveServerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *ServerName            `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	ServerLoad    *ServerLoad            `protobuf:"bytes,2,req,name=server_load,json=serverLoad" json:"server_load,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveServerInfo) Reset() {
	*x = LiveServerInfo{}
	mi := &file_ClusterStatus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveServerInfo) ProtoMessage() {}

func (x *LiveServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveServerInfo.ProtoReflect.Descriptor instead.
func (*LiveServerInfo) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{11}
}

func (x *LiveServerInfo) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *LiveServerInfo) GetServerLoad() *ServerLoad {
	if x != nil {
		return x.ServerLoad
	}
	return nil
}

type RegionStatesCount struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	OpenRegions         *uint32                `protobuf:"varint,1,req,name=open_regions,json=openRegions" json:"open_regions,omitempty"`
	SplitRegions        *uint32                `protobuf:"varint,2,req,name=split_regions,json=splitRegions" json:"split_regions,omitempty"`
	ClosedRegions       *uint32                `protobuf:"varint,3,req,name=closed_regions,json=closedRegions" json:"closed_regions,omitempty"`
	RegionsInTransition *uint32                `protobuf:"varint,4,req,name=regions_in_transition,json=regionsInTransition" json:"regions_in_transition,omitempty"`
	TotalRegions        *uint32                `protobuf:"varint,5,req,name=total_regions,json=totalRegions" json:"total_regions,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RegionStatesCount) Reset() {
	*x = RegionStatesCount{}
	mi := &file_ClusterStatus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionStatesCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStatesCount) ProtoMessage() {}

func (x *RegionStatesCount) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStatesCount.ProtoReflect.Descriptor instead.
func (*RegionStatesCount) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{12}
}

func (x *RegionStatesCount) GetOpenRegions() uint32 {
	if x != nil && x.OpenRegions != nil {
		return *x.OpenRegions
	}
	return 0
}

func (x *RegionStatesCount) GetSplitRegions() uint32 {
	if x != nil && x.SplitRegions != nil {
		return *x.SplitRegions
	}
	return 0
}

func (x *RegionStatesCount) GetClosedRegions() uint32 {
	if x != nil && x.ClosedRegions != nil {
		return *x.ClosedRegions
	}
	return 0
}

func (x *RegionStatesCount) GetRegionsInTransition() uint32 {
	if x != nil && x.RegionsInTransition != nil {
		return *x.RegionsInTransition
	}
	return 0
}

func (x *RegionStatesCount) GetTotalRegions() uint32 {
	if x != nil && x.TotalRegions != nil {
		return *x.TotalRegions
	}
	return 0
}

type TableRegionStatesCount struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TableName         *TableName             `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	RegionStatesCount *RegionStatesCount     `protobuf:"bytes,2,req,name=region_states_count,json=regionStatesCount" json:"region_states_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TableRegionStatesCount) Reset() {
	*x = TableRegionStatesCount{}
	mi := &file_ClusterStatus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableRegionStatesCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRegionStatesCount) ProtoMessage() {}

func (x *TableRegionStatesCount) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRegionStatesCount.ProtoReflect.Descriptor instead.
func (*TableRegionStatesCount) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{13}
}

func (x *TableRegionStatesCount) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *TableRegionStatesCount) GetRegionStatesCount() *RegionStatesCount {
	if x != nil {
		return x.RegionStatesCount
	}
	return nil
}

type ClusterStatus struct {
	state                  protoimpl.MessageState    `protogen:"open.v1"`
	HbaseVersion           *HBaseVersionFileContent  `protobuf:"bytes,1,opt,name=hbase_version,json=hbaseVersion" json:"hbase_version,omitempty"`
	LiveServers            []*LiveServerInfo         `protobuf:"bytes,2,rep,name=live_servers,json=liveServers" json:"live_servers,omitempty"`
	DeadServers            []*ServerName             `protobuf:"bytes,3,rep,name=dead_servers,json=deadServers" json:"dead_servers,omitempty"`
	RegionsInTransition    []*RegionInTransition     `protobuf:"bytes,4,rep,name=regions_in_transition,json=regionsInTransition" json:"regions_in_transition,omitempty"`
	ClusterId              *ClusterId                `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	MasterCoprocessors     []*Coprocessor            `protobuf:"bytes,6,rep,name=master_coprocessors,json=masterCoprocessors" json:"master_coprocessors,omitempty"`
	Master                 *ServerName               `protobuf:"bytes,7,opt,name=master" json:"master,omitempty"`
	BackupMasters          []*ServerName             `protobuf:"bytes,8,rep,name=backup_masters,json=backupMasters" json:"backup_masters,omitempty"`
	BalancerOn             *bool                     `protobuf:"varint,9,opt,name=balancer_on,json=balancerOn" json:"balancer_on,omitempty"`
	MasterInfoPort         *int32                    `protobuf:"varint,10,opt,name=master_info_port,json=masterInfoPort,def=-1" json:"master_info_port,omitempty"`
	ServersName            []*ServerName             `protobuf:"bytes,11,rep,name=servers_name,json=serversName" json:"servers_name,omitempty"`
	TableRegionStatesCount []*TableRegionStatesCount `protobuf:"bytes,12,rep,name=table_region_states_count,json=tableRegionStatesCount" json:"table_region_states_count,omitempty"`
	MasterTasks            []*ServerTask             `protobuf:"bytes,13,rep,name=master_tasks,json=masterTasks" json:"master_tasks,omitempty"`
	DecommissionedServers  []*ServerName             `protobuf:"bytes,14,rep,name=decommissioned_servers,json=decommissionedServers" json:"decommissioned_servers,omitempty"`
	UnknownServers         []*ServerName             `protobuf:"bytes,15,rep,name=unknown_servers,json=unknownServers" json:"unknown_servers,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ClusterStatus fields.
const (
	Default_ClusterStatus_MasterInfoPort = int32(-1)
)

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	mi := &file_ClusterStatus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatus.ProtoReflect.Descriptor instead.
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterStatus) GetHbaseVersion() *HBaseVersionFileContent {
	if x != nil {
		return x.HbaseVersion
	}
	return nil
}

func (x *ClusterStatus) GetLiveServers() []*LiveServerInfo {
	if x != nil {
		return x.LiveServers
	}
	return nil
}

func (x *ClusterStatus) GetDeadServers() []*ServerName {
	if x != nil {
		return x.DeadServers
	}
	return nil
}

func (x *ClusterStatus) GetRegionsInTransition() []*RegionInTransition {
	if x != nil {
		return x.RegionsInTransition
	}
	return nil
}

func (x *ClusterStatus) GetClusterId() *ClusterId {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *ClusterStatus) GetMasterCoprocessors() []*Coprocessor {
	if x != nil {
		return x.MasterCoprocessors
	}
	return nil
}

func (x *ClusterStatus) GetMaster() *ServerName {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *ClusterStatus) GetBackupMasters() []*ServerName {
	if x != nil {
		return x.BackupMasters
	}
	return nil
}

func (x *ClusterStatus) GetBalancerOn() bool {
	if x != nil && x.BalancerOn != nil {
		return *x.BalancerOn
	}
	return false
}

func (x *ClusterStatus) GetMasterInfoPort() int32 {
	if x != nil && x.MasterInfoPort != nil {
		return *x.MasterInfoPort
	}
	return Default_ClusterStatus_MasterInfoPort
}

func (x *ClusterStatus) GetServersName() []*ServerName {
	if x != nil {
		return x.ServersName
	}
	return nil
}

func (x *ClusterStatus) GetTableRegionStatesCount() []*TableRegionStatesCount {
	if x != nil {
		return x.TableRegionStatesCount
	}
	return nil
}

func (x *ClusterStatus) GetMasterTasks() []*ServerTask {
	if x != nil {
		return x.MasterTasks
	}
	return nil
}

func (x *ClusterStatus) GetDecommissionedServers() []*ServerName {
	if x != nil {
		return x.DecommissionedServers
	}
	return nil
}

func (x *ClusterStatus) GetUnknownServers() []*ServerName {
	if x != nil {
		return x.UnknownServers
	}
	return nil
}

var File_ClusterStatus_proto protoreflect.FileDescriptor

var file_ClusterStatus_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x08, 0x46, 0x53, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfe, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfa, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x4c, 0x49, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45,
	0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x0f, 0x22, 0x71, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xd2, 0x0c, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x3e,
	0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x4d, 0x42, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x42, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12,
	0x29, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x4d, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x4b, 0x42, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4b,
	0x42, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4b, 0x56, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x56, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x4b, 0x56, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x56, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x4b, 0x42, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x4b, 0x42, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x4b, 0x42, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x4b, 0x42, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x4b, 0x42,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x4b, 0x42, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x73, 0x12, 0x50, 0x0a, 0x1a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x17, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x22, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73,
	0x73, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x53, 0x73, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x1c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x73, 0x73, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x73, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x49, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x42, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x3d, 0x0a,
	0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x46, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x49, 0x4e,
	0x4f, 0x52, 0x10, 0x03, 0x22, 0x5f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x4c, 0x61,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4f, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x12, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x4f, 0x70, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x4f, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x4f, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xe9, 0x03,
	0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x4f, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x12, 0x61, 0x67, 0x65,
	0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x66, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x66, 0x4c,
	0x6f, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x4f, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x4f, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x4e, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x50, 0x73,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f,
	0x50, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x0a, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xe6, 0x06, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x4d, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x64, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x42, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x42, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x0c, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x6e, 0x6b,
	0x12, 0x2a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x61,
	0x64, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x43, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x0e, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe2, 0x06, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x42, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x31, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x4a, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x13,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x12, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x2c,
	0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x55, 0x0a, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x16,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x16, 0x64, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x15, 0x64, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x0f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2a, 0xb4, 0x02, 0x0a, 0x06, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x41,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f,
	0x52, 0x53, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x10, 0x0c, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10, 0x0e,
	0x42, 0x54, 0x0a, 0x31, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x64,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x5a, 0x05, 0x2e, 0x2e,
	0x2f, 0x70, 0x62, 0xa0, 0x01, 0x01,
})

var (
	file_ClusterStatus_proto_rawDescOnce sync.Once
	file_ClusterStatus_proto_rawDescData []byte
)

func file_ClusterStatus_proto_rawDescGZIP() []byte {
	file_ClusterStatus_proto_rawDescOnce.Do(func() {
		file_ClusterStatus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ClusterStatus_proto_rawDesc), len(file_ClusterStatus_proto_rawDesc)))
	})
	return file_ClusterStatus_proto_rawDescData
}

var file_ClusterStatus_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ClusterStatus_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ClusterStatus_proto_goTypes = []any{
	(Option)(0),                     // 0: pb.Option
	(RegionState_State)(0),          // 1: pb.RegionState.State
	(RegionLoad_CompactionState)(0), // 2: pb.RegionLoad.CompactionState
	(ServerTask_State)(0),           // 3: pb.ServerTask.State
	(*RegionState)(nil),             // 4: pb.RegionState
	(*RegionInTransition)(nil),      // 5: pb.RegionInTransition
	(*StoreSequenceId)(nil),         // 6: pb.StoreSequenceId
	(*RegionStoreSequenceIds)(nil),  // 7: pb.RegionStoreSequenceIds
	(*RegionLoad)(nil),              // 8: pb.RegionLoad
	(*UserLoad)(nil),                // 9: pb.UserLoad
	(*ClientMetrics)(nil),           // 10: pb.ClientMetrics
	(*ReplicationLoadSink)(nil),     // 11: pb.ReplicationLoadSink
	(*ReplicationLoadSource)(nil),   // 12: pb.ReplicationLoadSource
	(*ServerTask)(nil),              // 13: pb.ServerTask
	(*ServerLoad)(nil),              // 14: pb.ServerLoad
	(*LiveServerInfo)(nil),          // 15: pb.LiveServerInfo
	(*RegionStatesCount)(nil),       // 16: pb.RegionStatesCount
	(*TableRegionStatesCount)(nil),  // 17: pb.TableRegionStatesCount
	(*ClusterStatus)(nil),           // 18: pb.ClusterStatus
	nil,                             // 19: pb.ServerLoad.RegionCachedInfoEntry
	(*RegionInfo)(nil),              // 20: pb.RegionInfo
	(*RegionSpecifier)(nil),         // 21: pb.RegionSpecifier
	(*Coprocessor)(nil),             // 22: pb.Coprocessor
	(*ServerName)(nil),              // 23: pb.ServerName
	(*TableName)(nil),               // 24: pb.TableName
	(*HBaseVersionFileContent)(nil), // 25: pb.HBaseVersionFileContent
	(*ClusterId)(nil),               // 26: pb.ClusterId
}
var file_ClusterStatus_proto_depIdxs = []int32{
	20, // 0: pb.RegionState.region_info:type_name -> pb.RegionInfo
	1,  // 1: pb.RegionState.state:type_name -> pb.RegionState.State
	21, // 2: pb.RegionInTransition.spec:type_name -> pb.RegionSpecifier
	4,  // 3: pb.RegionInTransition.region_state:type_name -> pb.RegionState
	6,  // 4: pb.RegionStoreSequenceIds.store_sequence_id:type_name -> pb.StoreSequenceId
	21, // 5: pb.RegionLoad.region_specifier:type_name -> pb.RegionSpecifier
	6,  // 6: pb.RegionLoad.store_complete_sequence_id:type_name -> pb.StoreSequenceId
	2,  // 7: pb.RegionLoad.compaction_state:type_name -> pb.RegionLoad.CompactionState
	10, // 8: pb.UserLoad.clientMetrics:type_name -> pb.ClientMetrics
	3,  // 9: pb.ServerTask.state:type_name -> pb.ServerTask.State
	8,  // 10: pb.ServerLoad.region_loads:type_name -> pb.RegionLoad
	22, // 11: pb.ServerLoad.coprocessors:type_name -> pb.Coprocessor
	12, // 12: pb.ServerLoad.replLoadSource:type_name -> pb.ReplicationLoadSource
	11, // 13: pb.ServerLoad.replLoadSink:type_name -> pb.ReplicationLoadSink
	9,  // 14: pb.ServerLoad.userLoads:type_name -> pb.UserLoad
	13, // 15: pb.ServerLoad.tasks:type_name -> pb.ServerTask
	19, // 16: pb.ServerLoad.regionCachedInfo:type_name -> pb.ServerLoad.RegionCachedInfoEntry
	23, // 17: pb.LiveServerInfo.server:type_name -> pb.ServerName
	14, // 18: pb.LiveServerInfo.server_load:type_name -> pb.ServerLoad
	24, // 19: pb.TableRegionStatesCount.table_name:type_name -> pb.TableName
	16, // 20: pb.TableRegionStatesCount.region_states_count:type_name -> pb.RegionStatesCount
	25, // 21: pb.ClusterStatus.hbase_version:type_name -> pb.HBaseVersionFileContent
	15, // 22: pb.ClusterStatus.live_servers:type_name -> pb.LiveServerInfo
	23, // 23: pb.ClusterStatus.dead_servers:type_name -> pb.ServerName
	5,  // 24: pb.ClusterStatus.regions_in_transition:type_name -> pb.RegionInTransition
	26, // 25: pb.ClusterStatus.cluster_id:type_name -> pb.ClusterId
	22, // 26: pb.ClusterStatus.master_coprocessors:type_name -> pb.Coprocessor
	23, // 27: pb.ClusterStatus.master:type_name -> pb.ServerName
	23, // 28: pb.ClusterStatus.backup_masters:type_name -> pb.ServerName
	23, // 29: pb.ClusterStatus.servers_name:type_name -> pb.ServerName
	17, // 30: pb.ClusterStatus.table_region_states_count:type_name -> pb.TableRegionStatesCount
	13, // 31: pb.ClusterStatus.master_tasks:type_name -> pb.ServerTask
	23, // 32: pb.ClusterStatus.decommissioned_servers:type_name -> pb.ServerName
	23, // 33: pb.ClusterStatus.unknown_servers:type_name -> pb.ServerName
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_ClusterStatus_proto_init() }
func file_ClusterStatus_proto_init() {
	if File_ClusterStatus_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_ClusterId_proto_init()
	file_FS_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ClusterStatus_proto_rawDesc), len(file_ClusterStatus_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ClusterStatus_proto_goTypes,
		DependencyIndexes: file_ClusterStatus_proto_depIdxs,
		EnumInfos:         file_ClusterStatus_proto_enumTypes,
		MessageInfos:      file_ClusterStatus_proto_msgTypes,
	}.Build()
	File_ClusterStatus_proto = out.File
	file_ClusterStatus_proto_goTypes = nil
	file_ClusterStatus_proto_depIdxs = nil
}
