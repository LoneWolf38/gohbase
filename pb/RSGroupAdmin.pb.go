//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: RSGroupAdmin.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListTablesOfRSGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupName   *string                `protobuf:"bytes,1,req,name=r_s_group_name,json=rSGroupName" json:"r_s_group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesOfRSGroupRequest) Reset() {
	*x = ListTablesOfRSGroupRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesOfRSGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesOfRSGroupRequest) ProtoMessage() {}

func (x *ListTablesOfRSGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesOfRSGroupRequest.ProtoReflect.Descriptor instead.
func (*ListTablesOfRSGroupRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{0}
}

func (x *ListTablesOfRSGroupRequest) GetRSGroupName() string {
	if x != nil && x.RSGroupName != nil {
		return *x.RSGroupName
	}
	return ""
}

type ListTablesOfRSGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     []*TableName           `protobuf:"bytes,1,rep,name=table_name,json=tableName" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesOfRSGroupResponse) Reset() {
	*x = ListTablesOfRSGroupResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesOfRSGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesOfRSGroupResponse) ProtoMessage() {}

func (x *ListTablesOfRSGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesOfRSGroupResponse.ProtoReflect.Descriptor instead.
func (*ListTablesOfRSGroupResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{1}
}

func (x *ListTablesOfRSGroupResponse) GetTableName() []*TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type GetRSGroupInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupName   *string                `protobuf:"bytes,1,req,name=r_s_group_name,json=rSGroupName" json:"r_s_group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRSGroupInfoRequest) Reset() {
	*x = GetRSGroupInfoRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSGroupInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSGroupInfoRequest) ProtoMessage() {}

func (x *GetRSGroupInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSGroupInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRSGroupInfoRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{2}
}

func (x *GetRSGroupInfoRequest) GetRSGroupName() string {
	if x != nil && x.RSGroupName != nil {
		return *x.RSGroupName
	}
	return ""
}

type GetRSGroupInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupInfo   *RSGroupInfo           `protobuf:"bytes,1,opt,name=r_s_group_info,json=rSGroupInfo" json:"r_s_group_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRSGroupInfoResponse) Reset() {
	*x = GetRSGroupInfoResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSGroupInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSGroupInfoResponse) ProtoMessage() {}

func (x *GetRSGroupInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSGroupInfoResponse.ProtoReflect.Descriptor instead.
func (*GetRSGroupInfoResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{3}
}

func (x *GetRSGroupInfoResponse) GetRSGroupInfo() *RSGroupInfo {
	if x != nil {
		return x.RSGroupInfo
	}
	return nil
}

type GetRSGroupInfoOfTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     *TableName             `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRSGroupInfoOfTableRequest) Reset() {
	*x = GetRSGroupInfoOfTableRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSGroupInfoOfTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSGroupInfoOfTableRequest) ProtoMessage() {}

func (x *GetRSGroupInfoOfTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSGroupInfoOfTableRequest.ProtoReflect.Descriptor instead.
func (*GetRSGroupInfoOfTableRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{4}
}

func (x *GetRSGroupInfoOfTableRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type GetRSGroupInfoOfTableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupInfo   *RSGroupInfo           `protobuf:"bytes,1,opt,name=r_s_group_info,json=rSGroupInfo" json:"r_s_group_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRSGroupInfoOfTableResponse) Reset() {
	*x = GetRSGroupInfoOfTableResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSGroupInfoOfTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSGroupInfoOfTableResponse) ProtoMessage() {}

func (x *GetRSGroupInfoOfTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSGroupInfoOfTableResponse.ProtoReflect.Descriptor instead.
func (*GetRSGroupInfoOfTableResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{5}
}

func (x *GetRSGroupInfoOfTableResponse) GetRSGroupInfo() *RSGroupInfo {
	if x != nil {
		return x.RSGroupInfo
	}
	return nil
}

type MoveServersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetGroup   *string                `protobuf:"bytes,1,req,name=target_group,json=targetGroup" json:"target_group,omitempty"`
	Servers       []*ServerName          `protobuf:"bytes,3,rep,name=servers" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveServersRequest) Reset() {
	*x = MoveServersRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveServersRequest) ProtoMessage() {}

func (x *MoveServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveServersRequest.ProtoReflect.Descriptor instead.
func (*MoveServersRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{6}
}

func (x *MoveServersRequest) GetTargetGroup() string {
	if x != nil && x.TargetGroup != nil {
		return *x.TargetGroup
	}
	return ""
}

func (x *MoveServersRequest) GetServers() []*ServerName {
	if x != nil {
		return x.Servers
	}
	return nil
}

type MoveServersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveServersResponse) Reset() {
	*x = MoveServersResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveServersResponse) ProtoMessage() {}

func (x *MoveServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveServersResponse.ProtoReflect.Descriptor instead.
func (*MoveServersResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{7}
}

type MoveTablesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetGroup   *string                `protobuf:"bytes,1,req,name=target_group,json=targetGroup" json:"target_group,omitempty"`
	TableName     []*TableName           `protobuf:"bytes,2,rep,name=table_name,json=tableName" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveTablesRequest) Reset() {
	*x = MoveTablesRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesRequest) ProtoMessage() {}

func (x *MoveTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesRequest.ProtoReflect.Descriptor instead.
func (*MoveTablesRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{8}
}

func (x *MoveTablesRequest) GetTargetGroup() string {
	if x != nil && x.TargetGroup != nil {
		return *x.TargetGroup
	}
	return ""
}

func (x *MoveTablesRequest) GetTableName() []*TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type MoveTablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveTablesResponse) Reset() {
	*x = MoveTablesResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesResponse) ProtoMessage() {}

func (x *MoveTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesResponse.ProtoReflect.Descriptor instead.
func (*MoveTablesResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{9}
}

type AddRSGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupName   *string                `protobuf:"bytes,1,req,name=r_s_group_name,json=rSGroupName" json:"r_s_group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRSGroupRequest) Reset() {
	*x = AddRSGroupRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRSGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRSGroupRequest) ProtoMessage() {}

func (x *AddRSGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRSGroupRequest.ProtoReflect.Descriptor instead.
func (*AddRSGroupRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{10}
}

func (x *AddRSGroupRequest) GetRSGroupName() string {
	if x != nil && x.RSGroupName != nil {
		return *x.RSGroupName
	}
	return ""
}

type AddRSGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRSGroupResponse) Reset() {
	*x = AddRSGroupResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRSGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRSGroupResponse) ProtoMessage() {}

func (x *AddRSGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRSGroupResponse.ProtoReflect.Descriptor instead.
func (*AddRSGroupResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{11}
}

type RemoveRSGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupName   *string                `protobuf:"bytes,1,req,name=r_s_group_name,json=rSGroupName" json:"r_s_group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRSGroupRequest) Reset() {
	*x = RemoveRSGroupRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRSGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRSGroupRequest) ProtoMessage() {}

func (x *RemoveRSGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRSGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveRSGroupRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveRSGroupRequest) GetRSGroupName() string {
	if x != nil && x.RSGroupName != nil {
		return *x.RSGroupName
	}
	return ""
}

type RemoveRSGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRSGroupResponse) Reset() {
	*x = RemoveRSGroupResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRSGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRSGroupResponse) ProtoMessage() {}

func (x *RemoveRSGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRSGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveRSGroupResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{13}
}

type BalanceRSGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupName   *string                `protobuf:"bytes,1,req,name=r_s_group_name,json=rSGroupName" json:"r_s_group_name,omitempty"`
	IgnoreRit     *bool                  `protobuf:"varint,2,opt,name=ignore_rit,json=ignoreRit" json:"ignore_rit,omitempty"`
	DryRun        *bool                  `protobuf:"varint,3,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceRSGroupRequest) Reset() {
	*x = BalanceRSGroupRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceRSGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRSGroupRequest) ProtoMessage() {}

func (x *BalanceRSGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRSGroupRequest.ProtoReflect.Descriptor instead.
func (*BalanceRSGroupRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{14}
}

func (x *BalanceRSGroupRequest) GetRSGroupName() string {
	if x != nil && x.RSGroupName != nil {
		return *x.RSGroupName
	}
	return ""
}

func (x *BalanceRSGroupRequest) GetIgnoreRit() bool {
	if x != nil && x.IgnoreRit != nil {
		return *x.IgnoreRit
	}
	return false
}

func (x *BalanceRSGroupRequest) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

type BalanceRSGroupResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BalanceRan      *bool                  `protobuf:"varint,1,req,name=balanceRan" json:"balanceRan,omitempty"`
	MovesCalculated *uint32                `protobuf:"varint,2,opt,name=moves_calculated,json=movesCalculated" json:"moves_calculated,omitempty"`
	MovesExecuted   *uint32                `protobuf:"varint,3,opt,name=moves_executed,json=movesExecuted" json:"moves_executed,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BalanceRSGroupResponse) Reset() {
	*x = BalanceRSGroupResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceRSGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRSGroupResponse) ProtoMessage() {}

func (x *BalanceRSGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRSGroupResponse.ProtoReflect.Descriptor instead.
func (*BalanceRSGroupResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{15}
}

func (x *BalanceRSGroupResponse) GetBalanceRan() bool {
	if x != nil && x.BalanceRan != nil {
		return *x.BalanceRan
	}
	return false
}

func (x *BalanceRSGroupResponse) GetMovesCalculated() uint32 {
	if x != nil && x.MovesCalculated != nil {
		return *x.MovesCalculated
	}
	return 0
}

func (x *BalanceRSGroupResponse) GetMovesExecuted() uint32 {
	if x != nil && x.MovesExecuted != nil {
		return *x.MovesExecuted
	}
	return 0
}

type ListRSGroupInfosRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRSGroupInfosRequest) Reset() {
	*x = ListRSGroupInfosRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRSGroupInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRSGroupInfosRequest) ProtoMessage() {}

func (x *ListRSGroupInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRSGroupInfosRequest.ProtoReflect.Descriptor instead.
func (*ListRSGroupInfosRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{16}
}

type ListRSGroupInfosResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupInfo   []*RSGroupInfo         `protobuf:"bytes,1,rep,name=r_s_group_info,json=rSGroupInfo" json:"r_s_group_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRSGroupInfosResponse) Reset() {
	*x = ListRSGroupInfosResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRSGroupInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRSGroupInfosResponse) ProtoMessage() {}

func (x *ListRSGroupInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRSGroupInfosResponse.ProtoReflect.Descriptor instead.
func (*ListRSGroupInfosResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{17}
}

func (x *ListRSGroupInfosResponse) GetRSGroupInfo() []*RSGroupInfo {
	if x != nil {
		return x.RSGroupInfo
	}
	return nil
}

type GetRSGroupInfoOfServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *ServerName            `protobuf:"bytes,2,req,name=server" json:"server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRSGroupInfoOfServerRequest) Reset() {
	*x = GetRSGroupInfoOfServerRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSGroupInfoOfServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSGroupInfoOfServerRequest) ProtoMessage() {}

func (x *GetRSGroupInfoOfServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSGroupInfoOfServerRequest.ProtoReflect.Descriptor instead.
func (*GetRSGroupInfoOfServerRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{18}
}

func (x *GetRSGroupInfoOfServerRequest) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

type GetRSGroupInfoOfServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RSGroupInfo   *RSGroupInfo           `protobuf:"bytes,1,opt,name=r_s_group_info,json=rSGroupInfo" json:"r_s_group_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRSGroupInfoOfServerResponse) Reset() {
	*x = GetRSGroupInfoOfServerResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSGroupInfoOfServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSGroupInfoOfServerResponse) ProtoMessage() {}

func (x *GetRSGroupInfoOfServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSGroupInfoOfServerResponse.ProtoReflect.Descriptor instead.
func (*GetRSGroupInfoOfServerResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{19}
}

func (x *GetRSGroupInfoOfServerResponse) GetRSGroupInfo() *RSGroupInfo {
	if x != nil {
		return x.RSGroupInfo
	}
	return nil
}

type MoveServersAndTablesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetGroup   *string                `protobuf:"bytes,1,req,name=target_group,json=targetGroup" json:"target_group,omitempty"`
	Servers       []*ServerName          `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
	TableName     []*TableName           `protobuf:"bytes,3,rep,name=table_name,json=tableName" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveServersAndTablesRequest) Reset() {
	*x = MoveServersAndTablesRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveServersAndTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveServersAndTablesRequest) ProtoMessage() {}

func (x *MoveServersAndTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveServersAndTablesRequest.ProtoReflect.Descriptor instead.
func (*MoveServersAndTablesRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{20}
}

func (x *MoveServersAndTablesRequest) GetTargetGroup() string {
	if x != nil && x.TargetGroup != nil {
		return *x.TargetGroup
	}
	return ""
}

func (x *MoveServersAndTablesRequest) GetServers() []*ServerName {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *MoveServersAndTablesRequest) GetTableName() []*TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type MoveServersAndTablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveServersAndTablesResponse) Reset() {
	*x = MoveServersAndTablesResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveServersAndTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveServersAndTablesResponse) ProtoMessage() {}

func (x *MoveServersAndTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveServersAndTablesResponse.ProtoReflect.Descriptor instead.
func (*MoveServersAndTablesResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{21}
}

type RemoveServersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*ServerName          `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveServersRequest) Reset() {
	*x = RemoveServersRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServersRequest) ProtoMessage() {}

func (x *RemoveServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServersRequest.ProtoReflect.Descriptor instead.
func (*RemoveServersRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveServersRequest) GetServers() []*ServerName {
	if x != nil {
		return x.Servers
	}
	return nil
}

type RemoveServersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveServersResponse) Reset() {
	*x = RemoveServersResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServersResponse) ProtoMessage() {}

func (x *RemoveServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServersResponse.ProtoReflect.Descriptor instead.
func (*RemoveServersResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{23}
}

type ListTablesInRSGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     *string                `protobuf:"bytes,1,req,name=group_name,json=groupName" json:"group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesInRSGroupRequest) Reset() {
	*x = ListTablesInRSGroupRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesInRSGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesInRSGroupRequest) ProtoMessage() {}

func (x *ListTablesInRSGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesInRSGroupRequest.ProtoReflect.Descriptor instead.
func (*ListTablesInRSGroupRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{24}
}

func (x *ListTablesInRSGroupRequest) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

type ListTablesInRSGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     []*TableName           `protobuf:"bytes,1,rep,name=table_name,json=tableName" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesInRSGroupResponse) Reset() {
	*x = ListTablesInRSGroupResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesInRSGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesInRSGroupResponse) ProtoMessage() {}

func (x *ListTablesInRSGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesInRSGroupResponse.ProtoReflect.Descriptor instead.
func (*ListTablesInRSGroupResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{25}
}

func (x *ListTablesInRSGroupResponse) GetTableName() []*TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type GetConfiguredNamespacesAndTablesInRSGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     *string                `protobuf:"bytes,1,req,name=group_name,json=groupName" json:"group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfiguredNamespacesAndTablesInRSGroupRequest) Reset() {
	*x = GetConfiguredNamespacesAndTablesInRSGroupRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfiguredNamespacesAndTablesInRSGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfiguredNamespacesAndTablesInRSGroupRequest) ProtoMessage() {}

func (x *GetConfiguredNamespacesAndTablesInRSGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfiguredNamespacesAndTablesInRSGroupRequest.ProtoReflect.Descriptor instead.
func (*GetConfiguredNamespacesAndTablesInRSGroupRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{26}
}

func (x *GetConfiguredNamespacesAndTablesInRSGroupRequest) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

type GetConfiguredNamespacesAndTablesInRSGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     []string               `protobuf:"bytes,1,rep,name=namespace" json:"namespace,omitempty"`
	TableName     []*TableName           `protobuf:"bytes,2,rep,name=table_name,json=tableName" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfiguredNamespacesAndTablesInRSGroupResponse) Reset() {
	*x = GetConfiguredNamespacesAndTablesInRSGroupResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfiguredNamespacesAndTablesInRSGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfiguredNamespacesAndTablesInRSGroupResponse) ProtoMessage() {}

func (x *GetConfiguredNamespacesAndTablesInRSGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfiguredNamespacesAndTablesInRSGroupResponse.ProtoReflect.Descriptor instead.
func (*GetConfiguredNamespacesAndTablesInRSGroupResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{27}
}

func (x *GetConfiguredNamespacesAndTablesInRSGroupResponse) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *GetConfiguredNamespacesAndTablesInRSGroupResponse) GetTableName() []*TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type RenameRSGroupRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OldRsgroupName *string                `protobuf:"bytes,1,req,name=old_rsgroup_name,json=oldRsgroupName" json:"old_rsgroup_name,omitempty"`
	NewRsgroupName *string                `protobuf:"bytes,2,req,name=new_rsgroup_name,json=newRsgroupName" json:"new_rsgroup_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RenameRSGroupRequest) Reset() {
	*x = RenameRSGroupRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameRSGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRSGroupRequest) ProtoMessage() {}

func (x *RenameRSGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRSGroupRequest.ProtoReflect.Descriptor instead.
func (*RenameRSGroupRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{28}
}

func (x *RenameRSGroupRequest) GetOldRsgroupName() string {
	if x != nil && x.OldRsgroupName != nil {
		return *x.OldRsgroupName
	}
	return ""
}

func (x *RenameRSGroupRequest) GetNewRsgroupName() string {
	if x != nil && x.NewRsgroupName != nil {
		return *x.NewRsgroupName
	}
	return ""
}

type RenameRSGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameRSGroupResponse) Reset() {
	*x = RenameRSGroupResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameRSGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRSGroupResponse) ProtoMessage() {}

func (x *RenameRSGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRSGroupResponse.ProtoReflect.Descriptor instead.
func (*RenameRSGroupResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{29}
}

type UpdateRSGroupConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     *string                `protobuf:"bytes,1,req,name=group_name,json=groupName" json:"group_name,omitempty"`
	Configuration []*NameStringPair      `protobuf:"bytes,2,rep,name=configuration" json:"configuration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRSGroupConfigRequest) Reset() {
	*x = UpdateRSGroupConfigRequest{}
	mi := &file_RSGroupAdmin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRSGroupConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRSGroupConfigRequest) ProtoMessage() {}

func (x *UpdateRSGroupConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRSGroupConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateRSGroupConfigRequest) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateRSGroupConfigRequest) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *UpdateRSGroupConfigRequest) GetConfiguration() []*NameStringPair {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type UpdateRSGroupConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRSGroupConfigResponse) Reset() {
	*x = UpdateRSGroupConfigResponse{}
	mi := &file_RSGroupAdmin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRSGroupConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRSGroupConfigResponse) ProtoMessage() {}

func (x *UpdateRSGroupConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RSGroupAdmin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRSGroupConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateRSGroupConfigResponse) Descriptor() ([]byte, []int) {
	return file_RSGroupAdmin_proto_rawDescGZIP(), []int{31}
}

var File_RSGroupAdmin_proto protoreflect.FileDescriptor

var file_RSGroupAdmin_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x4f, 0x66, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0e, 0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0e,
	0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x4f, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0e, 0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x6f,
	0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x64, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x52, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x15, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0e,
	0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x5f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x6f, 0x76, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x50, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0e, 0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x53, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0e, 0x72, 0x5f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x53, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x1e, 0x0a, 0x1c, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x41, 0x6e,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x40, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x53, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x52,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x77, 0x5f, 0x72, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x52, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x9c, 0x07, 0x0a, 0x13, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x4f, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x4f, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x53, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x4d,
	0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x56, 0x0a, 0x31, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x68,
	0x61, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x12, 0x52, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x5a, 0x05, 0x2e,
	0x2e, 0x2f, 0x70, 0x62, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
})

var (
	file_RSGroupAdmin_proto_rawDescOnce sync.Once
	file_RSGroupAdmin_proto_rawDescData []byte
)

func file_RSGroupAdmin_proto_rawDescGZIP() []byte {
	file_RSGroupAdmin_proto_rawDescOnce.Do(func() {
		file_RSGroupAdmin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_RSGroupAdmin_proto_rawDesc), len(file_RSGroupAdmin_proto_rawDesc)))
	})
	return file_RSGroupAdmin_proto_rawDescData
}

var file_RSGroupAdmin_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_RSGroupAdmin_proto_goTypes = []any{
	(*ListTablesOfRSGroupRequest)(nil),                        // 0: pb.ListTablesOfRSGroupRequest
	(*ListTablesOfRSGroupResponse)(nil),                       // 1: pb.ListTablesOfRSGroupResponse
	(*GetRSGroupInfoRequest)(nil),                             // 2: pb.GetRSGroupInfoRequest
	(*GetRSGroupInfoResponse)(nil),                            // 3: pb.GetRSGroupInfoResponse
	(*GetRSGroupInfoOfTableRequest)(nil),                      // 4: pb.GetRSGroupInfoOfTableRequest
	(*GetRSGroupInfoOfTableResponse)(nil),                     // 5: pb.GetRSGroupInfoOfTableResponse
	(*MoveServersRequest)(nil),                                // 6: pb.MoveServersRequest
	(*MoveServersResponse)(nil),                               // 7: pb.MoveServersResponse
	(*MoveTablesRequest)(nil),                                 // 8: pb.MoveTablesRequest
	(*MoveTablesResponse)(nil),                                // 9: pb.MoveTablesResponse
	(*AddRSGroupRequest)(nil),                                 // 10: pb.AddRSGroupRequest
	(*AddRSGroupResponse)(nil),                                // 11: pb.AddRSGroupResponse
	(*RemoveRSGroupRequest)(nil),                              // 12: pb.RemoveRSGroupRequest
	(*RemoveRSGroupResponse)(nil),                             // 13: pb.RemoveRSGroupResponse
	(*BalanceRSGroupRequest)(nil),                             // 14: pb.BalanceRSGroupRequest
	(*BalanceRSGroupResponse)(nil),                            // 15: pb.BalanceRSGroupResponse
	(*ListRSGroupInfosRequest)(nil),                           // 16: pb.ListRSGroupInfosRequest
	(*ListRSGroupInfosResponse)(nil),                          // 17: pb.ListRSGroupInfosResponse
	(*GetRSGroupInfoOfServerRequest)(nil),                     // 18: pb.GetRSGroupInfoOfServerRequest
	(*GetRSGroupInfoOfServerResponse)(nil),                    // 19: pb.GetRSGroupInfoOfServerResponse
	(*MoveServersAndTablesRequest)(nil),                       // 20: pb.MoveServersAndTablesRequest
	(*MoveServersAndTablesResponse)(nil),                      // 21: pb.MoveServersAndTablesResponse
	(*RemoveServersRequest)(nil),                              // 22: pb.RemoveServersRequest
	(*RemoveServersResponse)(nil),                             // 23: pb.RemoveServersResponse
	(*ListTablesInRSGroupRequest)(nil),                        // 24: pb.ListTablesInRSGroupRequest
	(*ListTablesInRSGroupResponse)(nil),                       // 25: pb.ListTablesInRSGroupResponse
	(*GetConfiguredNamespacesAndTablesInRSGroupRequest)(nil),  // 26: pb.GetConfiguredNamespacesAndTablesInRSGroupRequest
	(*GetConfiguredNamespacesAndTablesInRSGroupResponse)(nil), // 27: pb.GetConfiguredNamespacesAndTablesInRSGroupResponse
	(*RenameRSGroupRequest)(nil),                              // 28: pb.RenameRSGroupRequest
	(*RenameRSGroupResponse)(nil),                             // 29: pb.RenameRSGroupResponse
	(*UpdateRSGroupConfigRequest)(nil),                        // 30: pb.UpdateRSGroupConfigRequest
	(*UpdateRSGroupConfigResponse)(nil),                       // 31: pb.UpdateRSGroupConfigResponse
	(*TableName)(nil),                                         // 32: pb.TableName
	(*RSGroupInfo)(nil),                                       // 33: pb.RSGroupInfo
	(*ServerName)(nil),                                        // 34: pb.ServerName
	(*NameStringPair)(nil),                                    // 35: pb.NameStringPair
}
var file_RSGroupAdmin_proto_depIdxs = []int32{
	32, // 0: pb.ListTablesOfRSGroupResponse.table_name:type_name -> pb.TableName
	33, // 1: pb.GetRSGroupInfoResponse.r_s_group_info:type_name -> pb.RSGroupInfo
	32, // 2: pb.GetRSGroupInfoOfTableRequest.table_name:type_name -> pb.TableName
	33, // 3: pb.GetRSGroupInfoOfTableResponse.r_s_group_info:type_name -> pb.RSGroupInfo
	34, // 4: pb.MoveServersRequest.servers:type_name -> pb.ServerName
	32, // 5: pb.MoveTablesRequest.table_name:type_name -> pb.TableName
	33, // 6: pb.ListRSGroupInfosResponse.r_s_group_info:type_name -> pb.RSGroupInfo
	34, // 7: pb.GetRSGroupInfoOfServerRequest.server:type_name -> pb.ServerName
	33, // 8: pb.GetRSGroupInfoOfServerResponse.r_s_group_info:type_name -> pb.RSGroupInfo
	34, // 9: pb.MoveServersAndTablesRequest.servers:type_name -> pb.ServerName
	32, // 10: pb.MoveServersAndTablesRequest.table_name:type_name -> pb.TableName
	34, // 11: pb.RemoveServersRequest.servers:type_name -> pb.ServerName
	32, // 12: pb.ListTablesInRSGroupResponse.table_name:type_name -> pb.TableName
	32, // 13: pb.GetConfiguredNamespacesAndTablesInRSGroupResponse.table_name:type_name -> pb.TableName
	35, // 14: pb.UpdateRSGroupConfigRequest.configuration:type_name -> pb.NameStringPair
	2,  // 15: pb.RSGroupAdminService.GetRSGroupInfo:input_type -> pb.GetRSGroupInfoRequest
	4,  // 16: pb.RSGroupAdminService.GetRSGroupInfoOfTable:input_type -> pb.GetRSGroupInfoOfTableRequest
	18, // 17: pb.RSGroupAdminService.GetRSGroupInfoOfServer:input_type -> pb.GetRSGroupInfoOfServerRequest
	6,  // 18: pb.RSGroupAdminService.MoveServers:input_type -> pb.MoveServersRequest
	8,  // 19: pb.RSGroupAdminService.MoveTables:input_type -> pb.MoveTablesRequest
	10, // 20: pb.RSGroupAdminService.AddRSGroup:input_type -> pb.AddRSGroupRequest
	12, // 21: pb.RSGroupAdminService.RemoveRSGroup:input_type -> pb.RemoveRSGroupRequest
	14, // 22: pb.RSGroupAdminService.BalanceRSGroup:input_type -> pb.BalanceRSGroupRequest
	16, // 23: pb.RSGroupAdminService.ListRSGroupInfos:input_type -> pb.ListRSGroupInfosRequest
	20, // 24: pb.RSGroupAdminService.MoveServersAndTables:input_type -> pb.MoveServersAndTablesRequest
	22, // 25: pb.RSGroupAdminService.RemoveServers:input_type -> pb.RemoveServersRequest
	28, // 26: pb.RSGroupAdminService.RenameRSGroup:input_type -> pb.RenameRSGroupRequest
	3,  // 27: pb.RSGroupAdminService.GetRSGroupInfo:output_type -> pb.GetRSGroupInfoResponse
	5,  // 28: pb.RSGroupAdminService.GetRSGroupInfoOfTable:output_type -> pb.GetRSGroupInfoOfTableResponse
	19, // 29: pb.RSGroupAdminService.GetRSGroupInfoOfServer:output_type -> pb.GetRSGroupInfoOfServerResponse
	7,  // 30: pb.RSGroupAdminService.MoveServers:output_type -> pb.MoveServersResponse
	9,  // 31: pb.RSGroupAdminService.MoveTables:output_type -> pb.MoveTablesResponse
	11, // 32: pb.RSGroupAdminService.AddRSGroup:output_type -> pb.AddRSGroupResponse
	13, // 33: pb.RSGroupAdminService.RemoveRSGroup:output_type -> pb.RemoveRSGroupResponse
	15, // 34: pb.RSGroupAdminService.BalanceRSGroup:output_type -> pb.BalanceRSGroupResponse
	17, // 35: pb.RSGroupAdminService.ListRSGroupInfos:output_type -> pb.ListRSGroupInfosResponse
	21, // 36: pb.RSGroupAdminService.MoveServersAndTables:output_type -> pb.MoveServersAndTablesResponse
	23, // 37: pb.RSGroupAdminService.RemoveServers:output_type -> pb.RemoveServersResponse
	29, // 38: pb.RSGroupAdminService.RenameRSGroup:output_type -> pb.RenameRSGroupResponse
	27, // [27:39] is the sub-list for method output_type
	15, // [15:27] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_RSGroupAdmin_proto_init() }
func file_RSGroupAdmin_proto_init() {
	if File_RSGroupAdmin_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_RSGroup_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_RSGroupAdmin_proto_rawDesc), len(file_RSGroupAdmin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_RSGroupAdmin_proto_goTypes,
		DependencyIndexes: file_RSGroupAdmin_proto_depIdxs,
		MessageInfos:      file_RSGroupAdmin_proto_msgTypes,
	}.Build()
	File_RSGroupAdmin_proto = out.File
	file_RSGroupAdmin_proto_goTypes = nil
	file_RSGroupAdmin_proto_depIdxs = nil
}
